# Name of your application. Used to uniquely configure containers.
service: insta_clone

# Name of the container image.
image: toatoko/insta_clone

# Deploy to these servers.
servers:
  web:
    - 13.60.9.221
  # job:
  #   hosts:
  #     - YOUR_EC2_INSTANCE_IP
  #   cmd: bin/jobs

# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
proxy:
  ssl: true
  host: blog-test.website # Replace with your actual domain

# Credentials for your image host.
registry:
  # Using Docker Hub (default)
  username: toatoko
  password:
    - KAMAL_REGISTRY_PASSWORD

# Inject ENV variables into containers (secrets come from .kamal/secrets).
env:
  secret:
    - RAILS_MASTER_KEY
    - DATABASE_URL
  clear:
    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    SOLID_QUEUE_IN_PUMA: true

    # Database configuration
    RAILS_ENV: production

    # Redis configuration (if using Redis for caching/sessions)
    # REDIS_URL: redis://localhost:6379/0

# Aliases are triggered with "bin/kamal <alias>".
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"

# Use a persistent storage volume for uploaded files and local Active Storage files.
volumes:
  - "insta_clone_storage:/rails/storage"

# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests.
asset_path: /rails/public/assets

# Configure the image builder.
builder:
  arch: amd64

# Health check configuration
healthcheck:
  path: /up
  port: 80
  max_attempts: 7
  interval: 20s
